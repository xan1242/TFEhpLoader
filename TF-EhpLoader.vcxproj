<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Release|Win32">
      <Configuration>Release</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug|Win32">
      <Configuration>Debug</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label="Globals">
    <ProjectGuid>{358ABA7E-A197-E864-2A7E-E44F968AB41B}</ProjectGuid>
    <IgnoreWarnCompileDuplicatedFilename>true</IgnoreWarnCompileDuplicatedFilename>
    <Keyword>MakeFileProj</Keyword>
    <ProjectName>TF-EhpLoader</ProjectName>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
    <ConfigurationType>Makefile</ConfigurationType>
    <UseDebugLibraries>false</UseDebugLibraries>
    <PlatformToolset>v143</PlatformToolset>
    <OutDir>.\build\</OutDir>
    <IntDir>obj\Win32\Release\TF-EhpLoader\</IntDir>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
    <ConfigurationType>Makefile</ConfigurationType>
    <UseDebugLibraries>true</UseDebugLibraries>
    <PlatformToolset>v143</PlatformToolset>
    <OutDir>.\build\</OutDir>
    <IntDir>obj\Win32\Debug\TF-EhpLoader\</IntDir>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  <ImportGroup Label="ExtensionSettings">
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <PropertyGroup Label="UserMacros" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <NMakeOutput>$(OutDir)TF-EhpLoader.prx</NMakeOutput>
    <NMakeBuildCommandLine>@echo off
setlocal EnableDelayedExpansion

:: Set your PPSSPP memstick location here
:: Otherwise, define PPSSPPMemstick in your environment variables
if not defined PPSSPPMemstick (set _PPSSPPMemstick=X:\PPSSPP\memstick) else (set _PPSSPPMemstick=!PPSSPPMemstick!)

:: Start the "make" process
:: You need to launch it via a script that sets the path variables, such as vsmake.ps1 here
:: We use Powershell to avoid issues with paths with spaces
powershell -ExecutionPolicy Bypass -File "$(SolutionDir)/external/pspsdk/vsmake.ps1" -C "$(SolutionDir)/source/$(ProjectName)/"
:: Exit on make error
if !errorlevel! neq 0 exit /b !errorlevel!
:: If the copy directory doesn't exist, we're done, otherwise, copy the built binary
if not exist !_PPSSPPMemstick! goto :eof
if not exist !_PPSSPPMemstick!\PLUGINS\$(ProjectName) mkdir !_PPSSPPMemstick!\PLUGINS\$(ProjectName)
copy /y $(NMakeOutput) !_PPSSPPMemstick!\PLUGINS\$(ProjectName)
</NMakeBuildCommandLine>
    <NMakeReBuildCommandLine>@echo off
setlocal EnableDelayedExpansion

:: Set your PPSSPP memstick location here
:: Otherwise, define PPSSPPMemstick in your environment variables
if not defined PPSSPPMemstick (set _PPSSPPMemstick=X:\PPSSPP\memstick) else (set _PPSSPPMemstick=!PPSSPPMemstick!)

:: Start the "make clean" process
:: You need to launch it via a script that sets the path variables, such as vsmake.ps1 here
:: We use Powershell to avoid issues with paths with spaces
powershell -ExecutionPolicy Bypass -File "$(SolutionDir)/external/pspsdk/vsmake.ps1" -C "$(SolutionDir)/source/$(ProjectName)/" clean
:: Exit on make error
if !errorlevel! neq 0 exit /b !errorlevel!

:: Start the "make" process
:: You need to launch it via a script that sets the path variables, such as vsmake.ps1 here
:: We use Powershell to avoid issues with paths with spaces
powershell -ExecutionPolicy Bypass -File "$(SolutionDir)/external/pspsdk/vsmake.ps1" -C "$(SolutionDir)/source/$(ProjectName)/"
:: Exit on make error
if !errorlevel! neq 0 exit /b !errorlevel!
:: If the copy directory doesn't exist, we're done, otherwise, copy the built binary
if not exist !_PPSSPPMemstick! goto :eof
if not exist !_PPSSPPMemstick!\PLUGINS\$(ProjectName) mkdir !_PPSSPPMemstick!\PLUGINS\$(ProjectName)
copy /y $(NMakeOutput) !_PPSSPPMemstick!\PLUGINS\$(ProjectName)
</NMakeReBuildCommandLine>
    <NMakeCleanCommandLine>@echo off
setlocal EnableDelayedExpansion

:: Start the "make clean" process
:: You need to launch it via a script that sets the path variables, such as vsmake.ps1 here
:: We use Powershell to avoid issues with paths with spaces
powershell -ExecutionPolicy Bypass -File "$(SolutionDir)/external/pspsdk/vsmake.ps1" -C "$(SolutionDir)/source/$(ProjectName)/" clean
:: Exit on make error
if !errorlevel! neq 0 exit /b !errorlevel!
</NMakeCleanCommandLine>
    <NMakeIncludeSearchPath>.\includes;.\external\pspsdk\usr\local\pspdev\bin;.\external\pspsdk\usr\local\pspdev\psp\include;.\external\pspsdk\usr\local\pspdev\psp\sdk\include</NMakeIncludeSearchPath>
    <AdditionalOptions>/std:c++latest %(AdditionalOptions)</AdditionalOptions>
    <NMakePreprocessorDefinitions>_PSP_FW_VERSION=150;$(NMakePreprocessorDefinitions)</NMakePreprocessorDefinitions>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <NMakeOutput>$(OutDir)TF-EhpLoader.prx</NMakeOutput>
    <NMakeBuildCommandLine>@echo off
setlocal EnableDelayedExpansion

:: Set your PPSSPP memstick location here
:: Otherwise, define PPSSPPMemstick in your environment variables
if not defined PPSSPPMemstick (set _PPSSPPMemstick=X:\PPSSPP\memstick) else (set _PPSSPPMemstick=!PPSSPPMemstick!)

:: Start the "make" process
:: You need to launch it via a script that sets the path variables, such as vsmake.ps1 here
:: We use Powershell to avoid issues with paths with spaces
powershell -ExecutionPolicy Bypass -File "$(SolutionDir)/external/pspsdk/vsmake.ps1" -C "$(SolutionDir)/source/$(ProjectName)/"
:: Exit on make error
if !errorlevel! neq 0 exit /b !errorlevel!
:: If the copy directory doesn't exist, we're done, otherwise, copy the built binary
if not exist !_PPSSPPMemstick! goto :eof
if not exist !_PPSSPPMemstick!\PSP\PLUGINS\$(ProjectName) mkdir !_PPSSPPMemstick!\PSP\PLUGINS\$(ProjectName)
copy /y $(NMakeOutput) !_PPSSPPMemstick!\PSP\PLUGINS\$(ProjectName)
</NMakeBuildCommandLine>
    <NMakeReBuildCommandLine>@echo off
setlocal EnableDelayedExpansion

:: Set your PPSSPP memstick location here
:: Otherwise, define PPSSPPMemstick in your environment variables
if not defined PPSSPPMemstick (set _PPSSPPMemstick=X:\PPSSPP\memstick) else (set _PPSSPPMemstick=!PPSSPPMemstick!)

:: Start the "make clean" process
:: You need to launch it via a script that sets the path variables, such as vsmake.ps1 here
:: We use Powershell to avoid issues with paths with spaces
powershell -ExecutionPolicy Bypass -File "$(SolutionDir)/external/pspsdk/vsmake.ps1" -C "$(SolutionDir)/source/$(ProjectName)/" clean
:: Exit on make error
if !errorlevel! neq 0 exit /b !errorlevel!

:: Start the "make" process
:: You need to launch it via a script that sets the path variables, such as vsmake.ps1 here
:: We use Powershell to avoid issues with paths with spaces
powershell -ExecutionPolicy Bypass -File "$(SolutionDir)/external/pspsdk/vsmake.ps1" -C "$(SolutionDir)/source/$(ProjectName)/"
:: Exit on make error
if !errorlevel! neq 0 exit /b !errorlevel!
:: If the copy directory doesn't exist, we're done, otherwise, copy the built binary
if not exist !_PPSSPPMemstick! goto :eof
if not exist !_PPSSPPMemstick!\PSP\PLUGINS\$(ProjectName) mkdir !_PPSSPPMemstick!\PSP\PLUGINS\$(ProjectName)
copy /y $(NMakeOutput) !_PPSSPPMemstick!\PSP\PLUGINS\$(ProjectName)
</NMakeReBuildCommandLine>
    <NMakeCleanCommandLine>@echo off
setlocal EnableDelayedExpansion

:: Start the "make clean" process
:: You need to launch it via a script that sets the path variables, such as vsmake.ps1 here
:: We use Powershell to avoid issues with paths with spaces
powershell -ExecutionPolicy Bypass -File "$(SolutionDir)/external/pspsdk/vsmake.ps1" -C "$(SolutionDir)/source/$(ProjectName)/" clean
:: Exit on make error
if !errorlevel! neq 0 exit /b !errorlevel!
</NMakeCleanCommandLine>
    <NMakeIncludeSearchPath>.\includes;.\external\pspsdk\usr\local\pspdev\bin;.\external\pspsdk\usr\local\pspdev\psp\include;.\external\pspsdk\usr\local\pspdev\psp\sdk\include</NMakeIncludeSearchPath>
    <AdditionalOptions>/std:c++latest %(AdditionalOptions)</AdditionalOptions>
    <NMakePreprocessorDefinitions>_PSP_FW_VERSION=150;$(NMakePreprocessorDefinitions)</NMakePreprocessorDefinitions>
  </PropertyGroup>
  <ItemDefinitionGroup>
  </ItemDefinitionGroup>
  <ItemGroup>
    <ClCompile Include=".\source\TF-EhpLoader\main.c" />
    <ClCompile Include="source\TF-EhpLoader\ehploader.c" />
  </ItemGroup>
  <ItemGroup>
    <None Include=".\data\plugin.ini" />
    <None Include=".\source\TF-EhpLoader\makefile" />
  </ItemGroup>
  <ItemGroup>
    <ClInclude Include="source\TF-EhpLoader\ehploader.h" />
  </ItemGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <ImportGroup Label="ExtensionTargets">
  </ImportGroup>
</Project>